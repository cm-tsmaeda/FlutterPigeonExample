// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object PgnAppLifecycleFlutterApiPigeonUtils {

  fun createConnectionError(channelName: String): FlutterError {
    return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }
}

/** アプリのライフサイクル状態 */
enum class PgnAppLifecycleState(val raw: Int) {
  ENTER_FOREGROUND(0),
  ENTER_BACKGROUND(1);

  companion object {
    fun ofRaw(raw: Int): PgnAppLifecycleState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
private open class PgnAppLifecycleFlutterApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PgnAppLifecycleState.ofRaw(it.toInt())
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PgnAppLifecycleState -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class PgnAppLifecycleFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by PgnAppLifecycleFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      PgnAppLifecycleFlutterApiPigeonCodec()
    }
  }
  /** Flutter側の言語を取得する */
  fun getFlutterLanguage(callback: (Result<String>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_example.PgnAppLifecycleFlutterApi.getFlutterLanguage$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as String
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(PgnAppLifecycleFlutterApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  /**
   * アプリのライフサイクル状態が変化したときに呼び出される
   *
   * [state] アプリのライフサイクル状態
   */
  fun onAppLifecycleStateChanged(stateArg: PgnAppLifecycleState, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_example.PgnAppLifecycleFlutterApi.onAppLifecycleStateChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PgnAppLifecycleFlutterApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
