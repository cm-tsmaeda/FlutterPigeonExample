// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}


/// アプリのライフサイクル状態
enum PgnAppLifecycleState: Int {
  case enterForeground = 0
  case enterBackground = 1
}

private class PgnAppLifecycleFlutterApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PgnAppLifecycleState(rawValue: enumResultAsInt)
      }
      return nil
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PgnAppLifecycleFlutterApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PgnAppLifecycleState {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else {
      super.writeValue(value)
    }
  }
}

private class PgnAppLifecycleFlutterApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PgnAppLifecycleFlutterApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PgnAppLifecycleFlutterApiPigeonCodecWriter(data: data)
  }
}

class PgnAppLifecycleFlutterApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PgnAppLifecycleFlutterApiPigeonCodec(readerWriter: PgnAppLifecycleFlutterApiPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol PgnAppLifecycleFlutterApiProtocol {
  /// Flutter側の言語を取得する
  func getFlutterLanguage(completion: @escaping (Result<String, PigeonError>) -> Void)
  /// アプリのライフサイクル状態が変化したときに呼び出される
  ///
  /// [state] アプリのライフサイクル状態
  func onAppLifecycleStateChanged(state stateArg: PgnAppLifecycleState, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class PgnAppLifecycleFlutterApi: PgnAppLifecycleFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: PgnAppLifecycleFlutterApiPigeonCodec {
    return PgnAppLifecycleFlutterApiPigeonCodec.shared
  }
  /// Flutter側の言語を取得する
  func getFlutterLanguage(completion: @escaping (Result<String, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.pigeon_example.PgnAppLifecycleFlutterApi.getFlutterLanguage\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! String
        completion(.success(result))
      }
    }
  }
  /// アプリのライフサイクル状態が変化したときに呼び出される
  ///
  /// [state] アプリのライフサイクル状態
  func onAppLifecycleStateChanged(state stateArg: PgnAppLifecycleState, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.pigeon_example.PgnAppLifecycleFlutterApi.onAppLifecycleStateChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([stateArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
